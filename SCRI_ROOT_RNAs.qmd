---
title: "SCRI_ROOT_RNAs"
author: "Houston Saxe"
date: "1/28/2022"
output: github_document
editor: visual
---

# Load neccessary libraries

```{r echo=TRUE}
pacman::p_load(base,
               edgeR,
               tidytable,
               data.table,
               dplyr,
               stats,
               ggpubr,
               tidyr,
               ggplot2,
               gridExtra,
               limma,
               OmicsAnalyst,
               sjPlot,
               tibble,
               tidytext,
               utils,
               statmod,
               corrplot,
               stringr)
```

# Read in and prepare expression data

```{r}
dat = fread("C:/Users/hsaxe/OneDrive/Documents/ALAB/Transcriptome_data/Root/SCRI_ROOT_RNAseq_counts_combined_genomes.txt")

dat$GeneID = gsub("LOC", "", dat$GeneID)


head(dat)
```

# Read in metadata

```{r}
metadata = fread("SCRI_Phenotype_Analysis/2023_metadata.csv", stringsAsFactors = T) %>% 
  mutate(CAL_Wip_ID = gsub(' ', '-', CAL_Wip_ID) %>% 
           gsub('M4', 'M-4', .)) %>% 
  select(!matches('>'))

head(metadata)
```

## Modify metadata for this analysis

```{r}
metadata = data.frame(Sample = colnames(dat)[colnames(dat) != 'GeneID']) %>%
  mutate(Hybrid = as.factor(gsub("\\-\\d$", "", Sample))) %>%
  left_join(metadata, by = c('Hybrid' = 'CAL_Wip_ID')) %>% 
  rename_with(~ gsub('2Y-length', 'Length_2Y', .x) %>% 
                gsub('3Y-length', 'Length_3Y', .) %>% 
                gsub('2Y-RLN', 'RLN_2Y', .) %>% 
                gsub('3Y-RLN', 'RLN_3Y', .)) %>% 
   mutate(RLN_2_3Y = rowMeans(select(., matches('RLN'))))
  
row.names(metadata) = metadata$Sample

fwrite(metadata, 'Plotting/metadata.csv')

head(metadata)
```

## Plotting metadata

```{r}
metaLong = metadata %>% 
  select(!Sample) %>% 
  select(Hybrid, 
         CG_Avg,
         PHY_Avg,
         RLN_3Y,
         length_3Y) %>% 
  distinct() %>% 
  pivot_longer(where(is.numeric), 
               names_to = 'Trait')

p = ggplot(metaLong,
          aes(reorder_within(Hybrid, value, Trait), 
              value, 
              fill = Hybrid))+
  geom_col()+
  scale_x_reordered()+
  theme_gray(base_size = 15)+
  theme(axis.text.x = element_text(angle = 30))+
  facet_wrap(~Trait, scales = 'free', ncol = 2)
p

save_plot('DGEresults/metadata_plot.png', p, height = 10, width = 20)

save_plot('Final_Figs_and_Draft_Manuscript_SCRI_ROOT/Fig. S1.png', 
          p, 
          height = 15,
          width = 22)
```

## Center and scale predictors to make comparisons more interpretable in results

```{r}
metadata_S = metadata %>%
  mutate_if(is.numeric, scale) 

head(metadata_S)
```

## Plotting scaled metadata

```{r}
metaLongS = metadata_S %>% 
  select(!Sample) %>% 
  select(Hybrid, 
         CG_Avg,
         PHY_Avg, 
         RLN_3Y,
         length_3Y) %>% 
  distinct() %>% 
  pivot_longer(where(is.numeric), names_to = 'Trait')

p = ggplot(metaLongS, aes(reorder_within(Hybrid, value, Trait), value, fill = Hybrid))+
  geom_col()+
  scale_x_reordered()+
  theme(axis.text.x = element_text(angle = 30))+
  facet_wrap(~Trait, scales = 'free', ncol = 2)

p
```

# Get annotation

```{r}
Jm_anno = fread('C:/Users/hsaxe/OneDrive/Documents/ALAB/Genome_info/Genomic_Annotation_2/Jm_x_Jr/Jm_x_Jr_Genomic_annotation.csv') %>% 
  mutate(Parent_haplotype = 'J.microcarpa') 

Jr_anno = fread('C:/Users/hsaxe/OneDrive/Documents/ALAB/Genome_info/Genomic_Annotation_2/Jr/Jr_Genomic_annotation.csv') %>% 
  mutate(Parent_haplotype = 'J.regia')

# Rbind annotations into one file
annotation_combined = Jm_anno %>% 
  rbind(Jr_anno, fill = T) %>% 
  mutate(GeneID = as.character(GeneID)) %>% 
  select(!product_accession) 

# Remove transcript variants since we did not map to mRNAs
annotation_combined = annotation_combined %>% 
  filter(!feature %like% 'CDS') %>% 
  mutate(name = gsub(', transcript variant X([1-9]|1[0-9])', '', name) %>% 
           gsub(' isoform X([1-9]|1[0-9])', '', .)) %>% 
  distinct()


fwrite(annotation_combined %>% 
         distinct(GeneID) %>% 
         mutate(GeneID = paste0('LOC', GeneID)), 'For_Panther/annotation_combined_GeneIDs.csv')
```

## Limma needs GeneIDs as rownames in expression data. Also, colnames of expression data need to match rownames of metadata

```{r}
dat1 = dat %>%
  column_to_rownames(var =  "GeneID") %>%
  as.matrix()

## Do colnames in data match rownames in metadata? If they don't, use match(x,y) produces the order of y required to match the order of x

all(colnames(dat1) == rownames(metadata_S))
# Names match

# If they didn't match, use below code
## What order do rows of metadat need to be in to match colnames of dat1?
# match(colnames(dat1), rownames(metadata))

## Reset rownames
# metadata = metadata[match(colnames(dat1), rownames(metadata)),]

# all(colnames(dat1) == rownames(metadata))
# now they match
```

# Create DGEList object

```{r}
library(edgeR)

dds = DGEList(dat1)

dim(dds$counts)

## Calculate library normalization factors (does not do anything to data)
dds = calcNormFactors(dds)

## These are the size factors (normalization factors) for each sample
# dds$samples
```

## Filter by max CPM (This is used for DGE analysis)

```{r}
d = expression_filter(dds, DGEList = T, FilterFUN = max, FilterThreshold = 30)

fwrite(d$counts %>% 
         data.frame() %>% 
         rownames_to_column(var = 'GeneID') %>% 
         mutate(GeneID = paste0('LOC', GeneID)) %>% 
         select(GeneID),
       'For_Panther/expressed_genes.csv')

## CPM normalized counts of all data
cpm = cpm(dds, prior.count = 2, log = F) 

cpm = cpm %>% 
  data.frame() %>% 
  rownames_to_column(var = 'GeneID') %>%  
  rename_with(~ gsub('X', '', gsub('\\.', '-', .x)))

fwrite(cpm, 'Plotting/cpm_plotting_data.csv')

## CPM normalized counts of filtered data
cpmd = cpm(d)

fwrite(cpmd %>% data.frame() %>% rownames_to_column(var = 'GeneID'),
       'DGEresults/DGE_CPM_data.csv')
```

## Plot PCA to check samples

```{r}
pca = plot_pca(cpmd, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               # Using 'Group' here becuase 'Hybrid' is already in metadata. Will cause error if I used 'Hybrid'
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'Hybrid',
               fill = 'Hybrid',
               plot_type = '2D')

pca$plot
```

```{r}
pca_scatter = plot_pca(cpmd, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               # Using 'Group' here becuase 'Hybrid' is already in metadata. Will cause error if I used 'Hybrid'
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'Hybrid',
               fill = 'Hybrid',
               plot_type = 'scatter')
  
plot_dat = pca_scatter$plot_dat %>%
  rename(Hybrid = Group) %>% 
  select(Hybrid, 
         CG_Avg,
         PC1,
         PC2,
         PC3, 
         PC4, 
         PC5) %>% 
  pivot_longer(!c(Hybrid, CG_Avg), names_to = 'PC')

```

## Correlation matrix of PCs 1-5 and CG

```{r}
cor(pca_scatter$plot_dat %>%
      select(CG_Avg,
             PC1,
             PC2,
             PC3, 
             PC4, 
             PC5))
```

```{r}
ggplot(plot_dat, aes(value, CG_Avg))+
  geom_point()+
  geom_smooth(method = 'lm')+
  facet_wrap(~PC)
```

## PC2 looks most correlated with CG_Avg, and is statistically significant

```{r}
CG_cor = cor.test(pca_scatter$plot_dat$PC2, pca_scatter$plot_dat$CG_Avg)

PCA_cor_res = data.frame(Cor = CG_cor$estimate,
                         PC = str_extract(CG_cor$data.name, 'PC.'),
                         P.val = CG_cor$p.value,
                         Trait = 'CG')

CG_cor
```

## Correlation matrix of PCs 1-5 and PHY

```{r}
cor(pca_scatter$plot_dat %>%
      select(PHY_Avg,
             PC1,
             PC2,
             PC3, 
             PC4, 
             PC5))
```

```{r}
plot_dat = pca_scatter$plot_dat %>%
  rename(Hybrid = Group) %>% 
  select(Hybrid, 
         PHY_Avg,
         PC1,
         PC2,
         PC3, 
         PC4, 
         PC5) %>% 
  pivot_longer(!c(Hybrid, PHY_Avg), names_to = 'PC')

ggplot(plot_dat, aes(value, PHY_Avg))+
  geom_point()+
  geom_smooth(method = 'lm')+
  facet_wrap(~PC)
```

## PC5 looks most correlated with PHY_Avg, but is not statistically significant

```{r}
PHY_cor = cor.test(pca_scatter$plot_dat$PC5, pca_scatter$plot_dat$PHY_Avg)

PCA_cor_res = PCA_cor_res %>% 
  rbind(data.frame(Cor = PHY_cor$estimate,
                   PC = str_extract(PHY_cor$data.name, 'PC.'),
                   P.val = PHY_cor$p.value,
                   Trait = 'PHY'))

PHY_cor
```

## Do any PCs correlate with phenotypes?

```{r fig.height=8, fig.width=5}
a = plot_pca(cpmd, metadata,
             # Having to use 'Hybrid' here to get it into the plotting data because the function drops everything but the join_by_name when summarizing for scatter
             join_by_name = 'Hybrid',
             plotting_factors_in = 'col_names',
             plotting_factors_name = Hybrid,
             x = 'PC2', y = 'CG_Avg',
             scale = T,
             center = T,
             color = 'Hybrid',
             plot_type = 'scatter',
             summarise_for_scatter = T)

b = plot_pca(cpmd, metadata,
             # Having to use 'Hybrid' here to get it into the plotting data because the function drops everything but the join_by_name when summarizing for scatter
             join_by_name = 'Hybrid',
             plotting_factors_in = 'col_names',
             plotting_factors_name = Hybrid,
             x = 'PC5',
             y = 'PHY_Avg',
             scale = T,
             center = T,
             color = 'Hybrid',
             plot_type = 'scatter',
             summarise_for_scatter = T)

arr = ggpubr::ggarrange(a$plot,
                b$plot,
                labels = c('A)', 'B)'), nrow = 2, ncol = 1)

arr

sjPlot::save_plot('DGEresults/PCA_scatter_CG_PH_NEM.png', arr, height = 24, width = 14)
```

# \*

# \**\*Differential expression analysis*

# CG Fit model for genes associated with CG score

```{r}
mm_CG = model.matrix(~CG_Avg, data = metadata_S)

head(mm_CG)
```

## What is voom?

### 1. Counts are transformed to log2 counts per million reads (CPM), where "per million reads" is defined based on the normalization factors we calculated earlier.

### 2. A linear model is fitted to the log2 CPM for each gene, and the residuals are calculated.

### 3. A smoothed curve is fitted to the sqrt(residual standard deviation) by average expression.

### (see red line in plot below)

### 4. The smoothed curve is used to obtain weights for each gene and sample that are passed into limma along with the log2 CPMs.

### More details at "[voom: precision weights unlock linear model analysis tools for RNA-seq read counts](https://genomebiology.biomedcentral.com/articles/10.1186/gb-2014-15-2-r29)"

## Filtered mean-variance trend CG

```{r}
y_CG <- voom(d, mm_CG , plot = T)
```

## Vs Unfiltered mean-variance trend CG

```{r}
tmp <- voom(dds, mm_CG, plot = T)
```

## Fitting linear models in limma with random effects CG

### We used six 'biological replicates' but these replicates tell us little about the variation due to genotype. Therefore, they are more like technical replicate used to account for variation we see in expression likely due to environmental (pots, soil type, water amount etc.) and sampling (technical variation in sampling method and RNA extraction) effects. These replicates should not be used in calculating a p-value testing the hypothesis of relationship between genotype and mRNA expression.

```{r}
## Need to tell limma where the within class correlation is coming from
dupcor_CG = duplicateCorrelation(y_CG,
                                 mm_CG,
                                 block = metadata_S$Hybrid)

## How correlated are the hybrid replicates on average?
consensus.corr.CG = dupcor_CG$consensus.correlation

consensus.corr.CG

# lmFit fits a linear model using weighted least squares for each gene:
fit_CG = lmFit(y_CG, 
               design = mm_CG,
               block = metadata_S$Hybrid, 
               correlation = consensus.corr.CG) 
```

## The variance characteristics of low expressed genes are different from high expressed genes, if treated the same, the effect is to over represent low expressed genes in the DE list.

### This is corrected for by the log transformation and voom. However, some genes will have increased or decreased variance that is not a result of low expression, but due to other random factors. We are going to run empirical Bayes to adjust the variance of these genes.

### Empirical Bayes smoothing of standard errors (shifts standard errors that are much larger or smaller than those from other genes towards the average standard error) (see "[Linear Models and Empirical Bayes Methods for Assessing Differential Expression in Microarray Experiments](https://www.degruyter.com/doi/10.2202/1544-6115.1027)"

```{r}
BlockFit_CG = eBayes(fit_CG)
```

# Limma results CG

## Results summary

```{r}
res_summaries_CG = BlockFit_CG %>% 
  decideTests() %>% 
  summary()

res_summaries_CG
```

## Table of results CG

```{r}
impCG = limma::topTable(BlockFit_CG, 
                        coef = 'CG_Avg',
                        sort.by = "logFC",
                        p.value = 0.05, 
                        adjust.method = "BH",
                        number = Inf) %>%
  rownames_to_column(var = 'GeneID') %>% 
  mutate(R = sqrt(t^2/(t^2 + 40)), AveExpr = 2^AveExpr)

fwrite(impCG, 'DGEresults/unAnnotated_results_CG.csv')

rawCG = fread('DGEresults/unAnnotated_results_CG.csv')

dim(impCG)
## adding Hybrid as a blocking variable reduced DEGs by several thousand
```

## Merge annotation with results CG

```{r}
impCG = impCG %>%
  left_join(annotation_combined, by = "GeneID")

head(impCG)

length(unique(impCG$GeneID))

fwrite(impCG, 'DGEresults/Limma_results_table_CG.csv')
```

## PCA of CG DEGs

```{r}
ids = impCG %>% 
  distinct(GeneID) %>% 
  mutate(GeneID = as.character(GeneID))

PCA_CG = cpmd %>% 
  data.frame() %>% 
  rownames_to_column(var = 'GeneID') %>% 
  right_join(ids) %>% 
  column_to_rownames(var = 'GeneID')

pca_plot_CG = plot_pca(PCA_CG, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'CG_Avg',
               fill = 'CG_Avg',
               plot_type = '2D',
               sep = '-')

# View(pca_plot_CG$plot_dat)

pca_plot_CG

```

## Read in CG results

```{r}
# impCG = fread('DGEresults/Limma_results_table_CG.csv')
```

# \*

# PHY Fit model for genes associated with PHY score

```{r}
mm_PHY = model.matrix(~PHY_Avg,
                      data = metadata_S)

head(mm_PHY)
```

## Filtered mean-variance trend PHY

```{r}
y_PHY <- voom(d, 
              mm_PHY,
              plot = T)
```

## Fitting linear models in limma with random effects PHY

```{r}
## Need to tell limma where the within class correlation is coming from
dupcor_PHY = duplicateCorrelation(y_PHY,
                                  mm_PHY,
                                  block = metadata_S$Hybrid)

## How correlated are the hybrid replicates on average?
consensus.corr.PHY = dupcor_PHY$consensus.correlation

consensus.corr.PHY

# lmFit fits a linear model using weighted least squares for each gene:
fit_PHY = lmFit(y_PHY,
                design = mm_PHY,
                block = metadata_S$Hybrid, 
                correlation = consensus.corr.PHY) 

# Ebayes
BlockFit_PHY = eBayes(fit_PHY)
```

# Limma results PHY

## Results summary

```{r}
res_summaries_PHY = BlockFit_PHY %>% decideTests() %>% summary()

res_summaries_PHY
```

## Table of results PHY

```{r}
impPHY = limma::topTable(BlockFit_PHY, 
                        coef = 'PHY_Avg',
                        sort.by = "logFC",
                        p.value = 0.05, 
                        adjust.method = "BH",
                        number = Inf) %>%
  rownames_to_column(var = 'GeneID') %>% 
  mutate(R = sqrt(t^2/(t^2 + 40)), AveExpr = 2^AveExpr)

fwrite(impPHY, 'DGEresults/unAnnotated_results_PHY.csv')

rawPHY = fread('DGEresults/unAnnotated_results_PHY.csv')

dim(impPHY)
## adding Hybrid as a blocking variable reduced DEGs by several thousand

head(impPHY)
```

## Merge annotation with results PHY

```{r}
impPHY = impPHY %>%

  left_join(annotation_combined, by = "GeneID")

head(impPHY)

fwrite(impPHY, 'DGEresults/Limma_results_table_PHY.csv')
```

## PCA of PHY DEGs

```{r}
ids = impPHY %>% 
  distinct(GeneID) %>% 
  mutate(GeneID = as.character(GeneID))

PCA_PHY = cpmd %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'GeneID') %>% 
  right_join(ids) %>% 
  column_to_rownames(var = 'GeneID')

pca_plot_PHY = plot_pca(PCA_PHY, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'PHY_Avg',
               fill = 'PHY_Avg',
               plot_type = '2D')

pca_plot_PHY$plot

```

## Cor.test of PC1 from PCA of DEGs with PHY_Avg

```{r}
pca_plot_PHY = plot_pca(PCA_PHY, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'PHY_Avg',
               fill = 'PHY_Avg',
               plot_type = 'scatter', 
               summarise_for_scatter = T)

# PCA of DEGs correlate well with phenotype as they should
cor.test(pca_plot_PHY$plot_dat$PC1, pca_plot_PHY$plot_dat$PHY_Avg)
```

# \*

# NEM 3Y and length 3Y Create DGEList object

# Have to do this becuse 3Y data are missing two samples, so can't use 'dat1'

```{r}
library(edgeR)

dat2 = fread("C:/Users/hsaxe/OneDrive/Documents/ALAB/Transcriptome_data/Root/SCRI_ROOT_RNAseq_counts_combined_genomes.txt")

dat2 = dat2 %>% 
  mutate(GeneID = gsub("LOC", "", GeneID)) %>% 
  select(!matches('JMS|STJM')) %>% 
  column_to_rownames(var = 'GeneID') %>% 
  as.matrix()


dds2 = DGEList(dat2)

dim(dds2$counts)

## Calculate library normalization factors (does not do anything to data)
dds2 = calcNormFactors(dds2)

## These are the size factors (normalization factors) for each sample
# dds$samples
```

```{r}
metadata_S2 = metadata %>% 
  filter(RLN_3Y != is.na(RLN_3Y)) %>% 
  mutate_if(is.numeric, scale) 
```

## Filter by max CPM (This is used for DGE analysis)

```{r}
d2 = expression_filter(dds2, 
                       DGEList = T,
                       FilterFUN = max,
                       FilterThreshold = 30)

## CPM normalized counts of filtered data
cpmd2 = cpm(d2)

# fwrite(cpmd %>% data.frame() %>% rownames_to_column(var = 'GeneID'), 'DGEresults/DGE_CPM_data.csv')
```

## Plot PCA to look in R

```{r}
pca3 = plot_pca(cpmd2, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               # Using 'Group' here becuase 'Hybrid' is already in metadata. Will cause error if I used 'Hybrid'
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'Hybrid',
               fill = 'Hybrid',
               plot_type = '2D')
```

```{r}
pca3$plot
```

```{r}
pca_scatter = plot_pca(cpmd2, metadata,
               join_by_name = 'Hybrid',
               plotting_factors_in = 'col_names',
               # Using 'Group' here becuase 'Hybrid' is already in metadata. Will cause error if I used 'Hybrid'
               plotting_factors_name = Hybrid, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'Hybrid',
               fill = 'Hybrid',
               plot_type = 'scatter')
  
plot_dat = pca_scatter$plot_dat %>%
  select(Hybrid, 
         RLN_3Y,
         PC1,
         PC2,
         PC3, 
         PC4, 
         PC5) %>% 
  pivot_longer(!c(Hybrid, RLN_3Y), names_to = 'PC')
```

## Correlation matrix of PCs 1-5 and NEM

```{r}
cor(pca_scatter$plot_dat %>%
      select(RLN_3Y,
             PC1,
             PC2,
             PC3, 
             PC4, 
             PC5))
```

```{r}
ggplot(plot_dat, aes(value, RLN_3Y))+
  geom_point()+
  geom_smooth(method = 'lm')+
  facet_wrap(~PC)
```

## PC4 looks most correlated with NEM_3Y, but actually is not statistically significant

```{r}
RLN_3Y_cor = cor.test(pca_scatter$plot_dat$PC4, pca_scatter$plot_dat$RLN_3Y)

PCA_cor_res = PCA_cor_res %>% 
  rbind(data.frame(Cor = RLN_3Y_cor$estimate,
                   PC = str_extract(RLN_3Y_cor$data.name, 'PC.'),
                   P.val = RLN_3Y_cor$p.value,
                   Trait = 'RLN_3Y'))

RLN_3Y_cor
# not actually correlated
```

## Correlation matrix of PCs 1-5 and Length_3Y

```{r}
cor(pca_scatter$plot_dat %>%
      select(length_3Y,
             PC1,
             PC2,
             PC3, 
             PC4, 
             PC5))
```

```{r}
plot_dat = pca_scatter$plot_dat %>%
  select(Hybrid, 
         length_3Y,
         PC1,
         PC2,
         PC3, 
         PC4, 
         PC5) %>% 
  pivot_longer(!c(Hybrid, length_3Y), names_to = 'PC')

ggplot(plot_dat, aes(value, length_3Y))+
  geom_point()+
  geom_smooth(method = 'lm')+
  facet_wrap(~PC)
```

## PC1 looks most correlated with length_3Y, but actually is not statistically significant by a close margin

```{r}
length_3Y_cor = cor.test(pca_scatter$plot_dat$PC1, pca_scatter$plot_dat$length_3Y)

PCA_cor_res = PCA_cor_res %>% 
  rbind(data.frame(Cor = length_3Y_cor$estimate,
                   PC = str_extract(length_3Y_cor$data.name, 'PC.'),
                   P.val = length_3Y_cor$p.value,
                   Trait = 'length_3Y'))

length_3Y_cor
```

```{r}
c3 = plot_pca(cpmd2, metadata,
             # Having to use 'Hybrid' here to get it into the plotting data because the function drops everything but the join_by_name when summarizing for scatter
             join_by_name = 'Hybrid',
             plotting_factors_in = 'col_names',
             plotting_factors_name = Hybrid, 
             x = 'PC1',
             y = 'length_3Y',
             scale = T, 
             center = T, 
             color = 'Hybrid',
             plot_type = 'scatter',
             summarise_for_scatter = T)

c3$plot
```

```{r}
c3 = plot_pca(cpmd2, metadata,
             # Having to use 'Hybrid' here to get it into the plotting data because the function drops everything but the join_by_name when summarizing for scatter
             join_by_name = 'Hybrid',
             plotting_factors_in = 'col_names',
             plotting_factors_name = Hybrid, 
             x = 'PC7',
             y = 'RLN_3Y',
             scale = T, 
             center = T, 
             color = 'Hybrid',
             plot_type = 'scatter',
             summarise_for_scatter = T)

c3$plot+
  aes(x = PC2, y = length_3Y)
```

# NEM_3Y Fit model for genes associated with NEM score

```{r}
mm_NEM_3Y = model.matrix(~RLN_3Y, 
                         data = metadata_S2)

head(mm_NEM_3Y)
```

## Filtered mean-variance trend NEM

```{r}
y_NEM_3Y <- voom(d2, 
                 mm_NEM_3Y,
                 plot = T)
```

## Fitting linear models in limma with random effects NEM_3Y

```{r}
## Need to tell limma where the within class correlation is coming from
dupcor_NEM_3Y = duplicateCorrelation(y_NEM_3Y,
                                      mm_NEM_3Y, 
                                      block = metadata_S2$Hybrid)

## How correlated are the hybrid replicates on average?
consensus.corr._NEM_3Y = dupcor_NEM_3Y$consensus.correlation

consensus.corr._NEM_3Y

# lmFit fits a linear model using weighted least squares for each gene:
fit_NEM_3Y = lmFit(y_NEM_3Y, 
            design = mm_NEM_3Y, 
            block = metadata_S2$Hybrid,
            correlation = consensus.corr._NEM_3Y) 

# Ebayes
BlockFit_NEM_3Y = eBayes(fit_NEM_3Y)
```

# Limma results \_NEM_3Y

## Result summary

```{r}
res_summaries_NEM_3Y = BlockFit_NEM_3Y %>% decideTests() %>% summary()

res_summaries_NEM_3Y
```

## Table of results \_NEM_3Y

```{r}
impNEM_3Y = topTable(BlockFit_NEM_3Y,
                  sort.by = "logFC",
                  p.value = 0.05,
                  adjust.method = "BH",
                  number = Inf) %>%
    rownames_to_column(var = 'GeneID') %>% 
  mutate(R = sqrt(t^2/(t^2 + 40)), AveExpr = 2^AveExpr)

dim(impNEM_3Y)
## adding Hybrid as a blocking variable reduced DEGs by several thousand

head(impNEM_3Y)
```

## Merge annotation with results \_NEM_3Y

```{r}
impNEM_3Y = impNEM_3Y %>%
  left_join(annotation_combined, by = "GeneID")

head(impNEM_3Y)

fwrite(impNEM_3Y, 'DGEresults/Limma_results_table_NEM_3Y.csv')

impNEM_3Y = fread('DGEresults/Limma_results_table_NEM_3Y.csv')
```

## PCA of \_NEM_3Y DEGs

```{r}
ids = impNEM_3Y %>% 
  distinct(GeneID) %>% 
  mutate(GeneID = as.character(GeneID))

PCA_NEM_3Y = cpmd2 %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'GeneID') %>% 
  right_join(ids) %>% 
  column_to_rownames(var = 'GeneID')

pca_plot_NEM_3Y = plot_pca(PCA_NEM_3Y, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'RLN_3Y',
               fill = 'RLN_3Y',
               plot_type = '2D')

pca_plot_NEM_3Y$plot

```

## Read in \_NEM_3Y results

```{r}
impNEM_3Y = fread('DGEresults/Limma_results_table_NEM_3Y.csv')
```

```{r}
pca3 = plot_pca(cpmd, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               # Using 'Group' here becuase 'Hybrid' is already in metadata. Will cause error if I used 'Hybrid'
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'length_3Y',
               fill = 'length_3Y',
               plot_type = '2D')
```

```{r}
pca3$plot
```

```{r}
c3 = plot_pca(cpmd, metadata,
             # Having to use 'Hybrid' here to get it into the plotting data because the function drops everything but the join_by_name when summarizing for scatter
             join_by_name = 'Hybrid',
             plotting_factors_in = 'col_names',
             plotting_factors_name = Hybrid, 
             x = 'PC7',
             y = 'length_3Y',
             scale = T, 
             center = T, 
             color = 'Hybrid',
             plot_type = 'scatter',
             summarise_for_scatter = T)

c3$plot
```

# \*

# Length_3Y Fit model for genes associated with score

```{r}
mm_Length_3Y = model.matrix(~length_3Y, 
                         data = metadata_S2)

head(mm_Length_3Y)
```

## Filtered mean-variance trend NEM

```{r}
y_Length_3Y <- voom(d2, 
                 mm_Length_3Y,
                 plot = T)
```

## Fitting linear models in limma with random effects Length_3Y

```{r}
## Need to tell limma where the within class correlation is coming from
dupcor_Length_3Y = duplicateCorrelation(y_Length_3Y,
                                      mm_Length_3Y, 
                                      block = metadata_S2$Hybrid)

## How correlated are the hybrid replicates on average?
consensus.corr._Length_3Y = dupcor_Length_3Y$consensus.correlation

consensus.corr._Length_3Y

# lmFit fits a linear model using weighted least squares for each gene:
fit_Length_3Y = lmFit(y_Length_3Y, 
            design = mm_Length_3Y, 
            block = metadata_S2$Hybrid,
            correlation = consensus.corr._Length_3Y) 

# Ebayes
BlockFit_Length_3Y = eBayes(fit_Length_3Y)
```

# Limma results \_Length_3Y

## Result summary

```{r}
res_summaries_Length_3Y = BlockFit_Length_3Y %>% 
  decideTests() %>%
  summary()

res_summaries_Length_3Y
```

## Table of results \_Length_3Y

```{r}
impLength_3Y = topTable(BlockFit_Length_3Y,
                  sort.by = "logFC",
                  p.value = 0.05,
                  adjust.method = "BH",
                  number = Inf) %>%
    rownames_to_column(var = 'GeneID') %>% 
  mutate(R = sqrt(t^2/(t^2 + 40)), AveExpr = 2^AveExpr)

dim(impLength_3Y)
## adding Hybrid as a blocking variable reduced DEGs by several thousand

head(impLength_3Y)
```

## Merge annotation with results \_Length_3Y

```{r}
impLength_3Y = impLength_3Y %>%
  left_join(annotation_combined, by = "GeneID")

head(impLength_3Y)

fwrite(impLength_3Y, 'DGEresults/Limma_results_table_Length_3Y.csv')

impLength_3Y = fread('DGEresults/Limma_results_table_Length_3Y.csv')
```

## PCA of \_Length_3Y DEGs

```{r}
ids = impLength_3Y %>% 
  distinct(GeneID) %>% 
  mutate(GeneID = as.character(GeneID))

PCA_Length_3Y = cpmd2 %>% 
  as.data.frame() %>% 
  rownames_to_column(var = 'GeneID') %>% 
  right_join(ids) %>% 
  column_to_rownames(var = 'GeneID')

pca_plot_Length_3Y = plot_pca(PCA_Length_3Y, metadata,
               join_by_name = 'Sample',
               plotting_factors_in = 'col_names',
               plotting_factors_name = Group, 
               x = 'PC1',
               y = 'PC2',
               scale = T, 
               center = T, 
               color = 'length_3Y',
               fill = 'length_3Y',
               plot_type = '2D')

pca_plot_Length_3Y$plot

```

## Read in \_Length_3Y results

```{r}
impLength_3Y = fread('DGEresults/Limma_results_table_Length_3Y.csv')
```

```{r}
PCA_cor_res

openxlsx::write.xlsx(PCA_cor_res, 'Final_Figs_and_Draft_Manuscript_SCRI_ROOT/Table 1.xlsx')
```

# Venn Diagram positive genes

```{r}
CG_pos = impCG %>%
  filter(logFC >= 0) %>% 
  distinct(GeneID) %>% 
  pull(GeneID)
  

PHY_pos = impPHY %>%
  filter(logFC >= 0) %>% 
  distinct(GeneID) %>% 
  pull(GeneID)

NEM_pos = impNEM_3Y %>%
  filter(logFC >= 0) %>% 
  distinct(GeneID)  %>% 
  pull(GeneID)

Length_pos = impLength_3Y %>%
  filter(logFC >= 0) %>% 
  distinct(GeneID)  %>% 
  pull(GeneID)

venn_pos = list(CG_pos = CG_pos, 
                PHY_pos = PHY_pos,
                NEM_pos = NEM_pos,
                Length_pos = Length_pos)

```

# Venn Diagram negative genes

```{r}
CG_neg = impCG %>%
  filter(logFC <= 0) %>% 
  distinct(GeneID) %>% 
  pull(GeneID)
  

PHY_neg = impPHY %>%
  filter(logFC <= 0) %>% 
  distinct(GeneID) %>% 
  pull(GeneID)

NEM_neg = impNEM_3Y %>%
  filter(logFC <= 0) %>% 
  distinct(GeneID)  %>% 
  pull(GeneID)

Length_neg = impLength_3Y %>%
  filter(logFC <= 0) %>% 
  distinct(GeneID)  %>% 
  pull(GeneID)

venn_neg = list(CG_neg = CG_neg,
                PHY_neg = PHY_neg, 
                NEM_neg = NEM_neg,
                Length_neg = Length_neg)

```

# Plot and save venn diagram figure with results summaries

```{r}
library(ggvenn)

a = ggvenn(venn_pos, text_size = 6)

b = ggvenn(venn_neg, text_size = 6)

ggarrange(a, b, labels = c('A)', 'B)'), label.y = 0.75)


save_plot('DGEresults/Venn_Pos_Neg.png',
          ggarrange(a, b, labels = c('A)', 'B)'), 
                    font.label = list(size = 25),
                    label.y = 0.75, 
                    heights = c(4,1)),
                    width = 45, 
                    height = 23)
```

# DGE result summaries, DEG counts

```{r}
all_res_summaries = cbind(res_summaries_CG, 
                          res_summaries_PHY,
                          res_summaries_NEM_3Y,
                          res_summaries_Length_3Y) %>% 
  as.data.frame() %>% 
  select(!matches('Intercept')) %>% 
  rbind(c('A. tumefaciens',
          'Phytophthora spp.',
          'P. vulnus',
          'three year tree length'))

openxlsx::write.xlsx(all_res_summaries %>% 
         rownames_to_column(var = 'Statistic'),
       'Final_Figs_and_Draft_Manuscript_SCRI_ROOT/Table 2.xlsx')


lapply(all_res_summaries, FUN = function(x){
  paste0(paste0(x[1], ' genes negatively associated with'),
        ', ',
        paste0(x[3], ' genes positively associated with'),
        ', and ',
        paste0(x[2], ' genes not associated with ', x[4]))
}) %>% 
  paste()
```

\
####End of analysis

# Extras\>\>\>\>\>\>

# Trait data have some collinearity

```{r}
library(ggcorrplot)

# Get matrix for correlation
cordat =  metadata_S %>%
  select(CG_Avg, PHY_Avg, RLN_2Y) %>%
  scale() %>%
  as.matrix()

# Calculate p-values
corpmat1 = cor_pmat(cordat, method = 'pearson')

# Calculate correlation coefficients
cormat1 =cor(cordat, method = 'pearson')

# Plot. All relationships are significant
p = ggcorrplot(cormat1, type = 'lower', hc.order = T, lab = T, p.mat = corpmat1)

p

save_plot('DGEresults/Pheno_corrplot.png', p)
```
